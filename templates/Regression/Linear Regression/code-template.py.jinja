{{ header("Install required libraries")}}

# install required libraries

{{ header("Import required libraries")}}

# importing required libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.metrics as metrics
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
{% if data == "Benchmark data" %}
# Read file

df = pd.read_csv("/content/Salary_Data.csv")
df.head()
{% endif %}

# Check range and null values

df.info()

sns.pairplot(df)

{% if data == "Benchmark data" %}
# Identify dependent and independent variable


X = df[['YearsExperience']]
y = df[['Salary']]
{% endif %}

# perform train and test split


X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.75,
                                                            random_state=23)

# select model and fit it


regressor = LinearRegression(fit_intercept=True)
regressor.fit(X_train,y_train)

# find prediction
y_predict = regressor.predict(X_test)

{% if data == "Benchmark data" %}
# Predict for specific year of experience

print(regressor.predict([[23]]))
{% endif %}

# Evaluation of Model

#Mean Absolute Error(MAE)

print("Mean Absolute Error(MAE) = ",mean_absolute_error(y_test,y_predict))

#Mean Squared Error(MSE)

print("Mean Squared Error(MSE) = ",mean_squared_error(y_test,y_predict))

#Root Mean Squared Error(RMSE)
print("Root Mean Squared Error(RMSE) = ",np.log(np.sqrt(mean_squared_error(y_test,y_predict))))

# R Squared (R2)

r2 = r2_score(y_test,y_predict)
print('R square =' ,r2)